{"title":"week-07-8-processing-processing","html":"<h1>processing Processing</h1>\n<p>This week I worked on connecting a Processing sketch to an Arduino. To do this\nwe need a way of communicating between the arduino and processing. The easiest\nway to do this is through Serial, a simple text protocol which the arduino talks.\nTo allow processing to read or send messages to and from the arduino connect to\nthe serial port through processing rather than using the Arduino serial monitor.</p>\n<p>We followed <a href=\"https://www.teachengineering.org/makerchallenges/view/nyu2-2298-sensors-visualization-data-arduino-circuit-challenge\">this tutorial</a>\nto connect the two systems.</p>\n<p>The below code is a simple example of the processing code required to communicate\nwith an arduino over the serial port.</p>\n<pre><code class=\"hljs language-java\"><span class=\"hljs-comment\">// Modified from linked tutorial</span>\n\n<span class=\"hljs-keyword\">import</span> processing.serial.*;\n\nSerial myPort;        <span class=\"hljs-comment\">// The serial port</span>\n\n<span class=\"hljs-keyword\">void</span> <span class=\"hljs-title hljs-function\">setup</span> <span class=\"hljs-params\">()</span> {\n  <span class=\"hljs-comment\">// List all the available serial ports</span>\n  <span class=\"hljs-comment\">// if using Processing 2.1 or later, use Serial.printArray()</span>\n  println(Serial.list());\n\n  <span class=\"hljs-comment\">// I know that the first port in the serial list on my mac</span>\n  <span class=\"hljs-comment\">// is always my  Arduino, so I open Serial.list()[0].</span>\n  <span class=\"hljs-comment\">// Open whatever port is the one you're using.</span>\n  myPort = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title hljs-class\">Serial</span>(<span class=\"hljs-built_in\">this</span>, Serial.list()[<span class=\"hljs-number\">0</span>], <span class=\"hljs-number\">9600</span>);\n\n  <span class=\"hljs-comment\">// don't generate a serialEvent() unless you get a newline character:</span>\n  myPort.bufferUntil(<span class=\"hljs-string\">'\\n'</span>);\n}\n\n<span class=\"hljs-comment\">// Serial Event is printed when we receive messages</span>\n<span class=\"hljs-keyword\">void</span> <span class=\"hljs-title hljs-function\">serialEvent</span> <span class=\"hljs-params\">(Serial myPort)</span> {\n  <span class=\"hljs-comment\">// get the ASCII string:</span>\n  <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">inString</span> <span class=\"hljs-operator\">=</span> myPort.readStringUntil(<span class=\"hljs-string\">'\\n'</span>);\n}\n\n<span class=\"hljs-comment\">// If we want to send messages it is done as such.</span>\n<span class=\"hljs-keyword\">void</span> <span class=\"hljs-title hljs-function\">loop</span><span class=\"hljs-params\">()</span> {\n  myPort.send(<span class=\"hljs-string\">\"Hello Arduino!\"</span>);\n}\n</code></pre>\n<p>The Arduino code is similar, we can read and write with the Serial port just\nlike Processing.</p>\n<pre><code class=\"hljs language-arduino\">  <span class=\"hljs-comment\">// Full sketch omitted.</span>\n\n <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">Serial</span>.<span class=\"hljs-built_in\">available</span>()) {\n    <span class=\"hljs-type\">byte</span> in = <span class=\"hljs-built_in\">Serial</span>.<span class=\"hljs-built_in\">read</span>(); <span class=\"hljs-comment\">// Read a byte from the Serial port</span>\n    <span class=\"hljs-comment\">// Do something with the data.</span>\n }\n\n <span class=\"hljs-built_in\">Serial</span>.<span class=\"hljs-built_in\">println</span>(<span class=\"hljs-string\">\"Hello Processing!\"</span>);\n</code></pre>\n<h2>Why connect these systems?</h2>\n<p>Connecting systems is extremely useful as different systems are very good at\ndifferent things, for example the arduino can control actuators and measure sensors\nbut is pretty limited when it comes to processing large amounts of data or displaying\ncomplicated information on a screen. I was particularly excited by this week\nbecause I have often connected systems to create unified pieces. For example\nI connected Pure Data (a digital music software) with processing to create and\ncontrol music produced on my laptop with an external keyboard.</p>\n<video style=\"max-width: 800px; width: auto;\" controls>\n<source src=\"/week-6.mp4\" type=\"video/mp4\">\n</video>\n<p>Another example is the Laptop Ensemble which makes extensive use of interconnected\nsystems to create electronic music with visuals.</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/A0NG-T8y7gM?start=3008\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>"}